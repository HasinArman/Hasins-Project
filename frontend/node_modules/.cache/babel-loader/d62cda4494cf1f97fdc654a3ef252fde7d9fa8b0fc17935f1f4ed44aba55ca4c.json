{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danya\\\\Desktop\\\\Hasin\\\\frontend\\\\src\\\\Components\\\\DynamicGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Graph from './Graph';\nimport DiseaseList from './DiseaseList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicGraph = () => {\n  _s();\n  const [data, setJokes] = useState([]);\n  const [diseaseNames, setDiseaseNames] = useState([]);\n  const [selectedDisease, setSelectedDisease] = useState('');\n\n  // Function to generate random values\n  const generateRandomValue = () => Math.floor(Math.random() * 9000) + 1;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/data');\n        setJokes(response.data);\n        const diseases = response.data.flatMap(joke => joke.entry.map(entry => {\n          var _entry$resource, _code$coding, _code$coding$;\n          const code = entry === null || entry === void 0 ? void 0 : (_entry$resource = entry.resource) === null || _entry$resource === void 0 ? void 0 : _entry$resource.code;\n          return (code === null || code === void 0 ? void 0 : (_code$coding = code.coding) === null || _code$coding === void 0 ? void 0 : (_code$coding$ = _code$coding[0]) === null || _code$coding$ === void 0 ? void 0 : _code$coding$.display) || (code === null || code === void 0 ? void 0 : code.text) || 'Unknown';\n        }));\n        const uniqueDiseases = [...new Set(diseases)];\n        const diseasesWithValues = uniqueDiseases.map(disease => ({\n          name: disease,\n          value: generateRandomValue()\n        }));\n        setDiseaseNames(diseasesWithValues);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DiseaseList, {\n      diseaseNames: diseaseNames,\n      setSelectedDisease: setSelectedDisease\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), selectedDisease && /*#__PURE__*/_jsxDEV(Graph, {\n      selectedDisease: selectedDisease,\n      diseaseNames: diseaseNames\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(DynamicGraph, \"oOx7nlYA0hbOTwRefpeA2XGzuV4=\");\n_c = DynamicGraph;\nexport default DynamicGraph;\nvar _c;\n$RefreshReg$(_c, \"DynamicGraph\");","map":{"version":3,"names":["React","useEffect","useState","axios","Graph","DiseaseList","jsxDEV","_jsxDEV","DynamicGraph","_s","data","setJokes","diseaseNames","setDiseaseNames","selectedDisease","setSelectedDisease","generateRandomValue","Math","floor","random","fetchData","response","get","diseases","flatMap","joke","entry","map","_entry$resource","_code$coding","_code$coding$","code","resource","coding","display","text","uniqueDiseases","Set","diseasesWithValues","disease","name","value","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/danya/Desktop/Hasin/frontend/src/Components/DynamicGraph.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Graph from './Graph';\r\nimport DiseaseList from './DiseaseList';\r\n\r\n\r\nconst DynamicGraph = () => {\r\n  const [data, setJokes] = useState([]);\r\n  const [diseaseNames, setDiseaseNames] = useState([]);\r\n  const [selectedDisease, setSelectedDisease] = useState('');\r\n\r\n  // Function to generate random values\r\n  const generateRandomValue = () => Math.floor(Math.random() * 9000) + 1;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/data');\r\n        setJokes(response.data);\r\n\r\n        const diseases = response.data.flatMap((joke) =>\r\n          joke.entry.map((entry) => {\r\n            const code = entry?.resource?.code;\r\n            return code?.coding?.[0]?.display || code?.text || 'Unknown';\r\n          })\r\n        );\r\n\r\n        const uniqueDiseases = [...new Set(diseases)];\r\n        const diseasesWithValues = uniqueDiseases.map((disease) => ({\r\n          name: disease,\r\n          value: generateRandomValue(),\r\n        }));\r\n\r\n        setDiseaseNames(diseasesWithValues);\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <DiseaseList diseaseNames={diseaseNames} setSelectedDisease={setSelectedDisease} />\r\n      {selectedDisease && <Graph selectedDisease={selectedDisease} diseaseNames={diseaseNames} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}