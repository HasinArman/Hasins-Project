{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danya\\\\Desktop\\\\Hasin\\\\frontend\\\\src\\\\JokeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicGraph = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [diseaseNames, setDiseaseNames] = useState([]);\n  const [selectedDisease, setSelectedDisease] = useState('');\n  const svgRef = useRef();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/data');\n        setData(response.data);\n        const diseases = response.data.flatMap(joke => joke.entry.map(entry => {\n          var _entry$resource, _code$coding;\n          const code = entry === null || entry === void 0 ? void 0 : (_entry$resource = entry.resource) === null || _entry$resource === void 0 ? void 0 : _entry$resource.code;\n          if ((code === null || code === void 0 ? void 0 : (_code$coding = code.coding) === null || _code$coding === void 0 ? void 0 : _code$coding.length) > 0) {\n            // If there are coding entries, map over them to retrieve display names\n            return code.coding.map(coding => coding.display || 'Unknown');\n          } else {\n            // If no coding entries, use the text field directly\n            return (code === null || code === void 0 ? void 0 : code.text) || 'Unknown';\n          }\n        }));\n        const uniqueDiseases = [...new Set(diseases.flat())];\n        setDiseaseNames(uniqueDiseases);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (selectedDisease && data.length > 0) {\n      const svg = d3.select(svgRef.current);\n      svg.selectAll('*').remove(); // Clear existing content\n\n      // Find the data for the selected disease\n      const diseaseEntry = data.find(joke => joke.entry.some(entry => entry.resource.code.text === selectedDisease));\n\n      // Placeholder data (replace with actual data if available)\n      const chartData = Array.from({\n        length: 5\n      }, (_, i) => ({\n        year: i + 1,\n        count: Math.floor(Math.random() * 900) + 100\n      }));\n      const width = 800;\n      const height = 600;\n      const margin = {\n        top: 40,\n        right: 40,\n        bottom: 70,\n        left: 70\n      };\n      const x = d3.scaleLinear().domain([1, d3.max(chartData, d => d.year)]).range([margin.left, width - margin.right]);\n      const y = d3.scaleLinear().domain([0, d3.max(chartData, d => d.count)]).nice().range([height - margin.bottom, margin.top]);\n      const line = d3.line().x(d => x(d.year)).y(d => y(d.count));\n\n      // Draw x-axis with label\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(x).tickSizeOuter(0)).append('text') // Add x-axis label\n      .attr('x', width / 2).attr('y', margin.bottom / 2).attr('text-anchor', 'middle').style('font-size', '14px').text('Year');\n\n      // Draw y-axis with label\n      svg.append('g').attr('transform', `translate(${margin.left}, 0)`).call(d3.axisLeft(y)).append('text') // Add y-axis label\n      .attr('transform', 'rotate(-90)').attr('x', -(height / 2)).attr('y', -margin.left / 2).attr('text-anchor', 'middle').style('font-size', '14px').text('Occurrences');\n\n      // Draw the line\n      svg.append('path').datum(chartData).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2).attr('d', line);\n    }\n  }, [selectedDisease, data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select a Disease\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedDisease(e.target.value),\n      value: selectedDisease,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a disease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), diseaseNames.map((disease, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: disease,\n        children: disease\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), selectedDisease && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Occurrences of \", selectedDisease]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"800\",\n        height: \"600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(DynamicGraph, \"EzDwfisrIVtbS5gceN1+ZCZirPM=\");\n_c = DynamicGraph;\nexport default DynamicGraph;\nvar _c;\n$RefreshReg$(_c, \"DynamicGraph\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","d3","jsxDEV","_jsxDEV","DynamicGraph","_s","data","setData","diseaseNames","setDiseaseNames","selectedDisease","setSelectedDisease","svgRef","fetchData","response","get","diseases","flatMap","joke","entry","map","_entry$resource","_code$coding","code","resource","coding","length","display","text","uniqueDiseases","Set","flat","err","console","error","svg","select","current","selectAll","remove","diseaseEntry","find","some","chartData","Array","from","_","i","year","count","Math","floor","random","width","height","margin","top","right","bottom","left","x","scaleLinear","domain","max","d","range","y","nice","line","append","attr","call","axisBottom","tickSizeOuter","style","axisLeft","datum","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","disease","index","ref","_c","$RefreshReg$"],"sources":["C:/Users/danya/Desktop/Hasin/frontend/src/JokeList.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport * as d3 from 'd3';\r\n\r\nconst DynamicGraph = () => {\r\n  const [data, setData] = useState([]);\r\n  const [diseaseNames, setDiseaseNames] = useState([]);\r\n  const [selectedDisease, setSelectedDisease] = useState('');\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/data');\r\n        setData(response.data);\r\n\r\n        const diseases = response.data.flatMap((joke) =>\r\n          joke.entry.map((entry) => {\r\n            const code = entry?.resource?.code;\r\n            if (code?.coding?.length > 0) {\r\n              // If there are coding entries, map over them to retrieve display names\r\n              return code.coding.map((coding) => coding.display || 'Unknown');\r\n            } else {\r\n              // If no coding entries, use the text field directly\r\n              return code?.text || 'Unknown';\r\n            }\r\n          })\r\n        );\r\n\r\n        const uniqueDiseases = [...new Set(diseases.flat())];\r\n        setDiseaseNames(uniqueDiseases);\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedDisease && data.length > 0) {\r\n      const svg = d3.select(svgRef.current);\r\n\r\n      svg.selectAll('*').remove(); // Clear existing content\r\n\r\n      // Find the data for the selected disease\r\n      const diseaseEntry = data.find(\r\n        (joke) => joke.entry.some((entry) => entry.resource.code.text === selectedDisease)\r\n      );\r\n\r\n      // Placeholder data (replace with actual data if available)\r\n      const chartData = Array.from({ length: 5 }, (_, i) => ({\r\n        year: i + 1,\r\n        count: Math.floor(Math.random() * 900) + 100,\r\n      }));\r\n\r\n      const width = 800;\r\n      const height = 600;\r\n      const margin = { top: 40, right: 40, bottom: 70, left: 70 };\r\n\r\n      const x = d3.scaleLinear()\r\n        .domain([1, d3.max(chartData, (d) => d.year)])\r\n        .range([margin.left, width - margin.right]);\r\n\r\n      const y = d3.scaleLinear()\r\n        .domain([0, d3.max(chartData, (d) => d.count)])\r\n        .nice()\r\n        .range([height - margin.bottom, margin.top]);\r\n\r\n      const line = d3.line()\r\n        .x((d) => x(d.year))\r\n        .y((d) => y(d.count));\r\n\r\n      // Draw x-axis with label\r\n      svg.append('g')\r\n        .attr('transform', `translate(0,${height - margin.bottom})`)\r\n        .call(d3.axisBottom(x).tickSizeOuter(0))\r\n        .append('text') // Add x-axis label\r\n        .attr('x', width / 2)\r\n        .attr('y', margin.bottom / 2)\r\n        .attr('text-anchor', 'middle')\r\n        .style('font-size', '14px')\r\n        .text('Year');\r\n\r\n      // Draw y-axis with label\r\n      svg.append('g')\r\n        .attr('transform', `translate(${margin.left}, 0)`)\r\n        .call(d3.axisLeft(y))\r\n        .append('text') // Add y-axis label\r\n        .attr('transform', 'rotate(-90)')\r\n        .attr('x', -(height / 2))\r\n        .attr('y', -margin.left / 2)\r\n        .attr('text-anchor', 'middle')\r\n        .style('font-size', '14px')\r\n        .text('Occurrences');\r\n\r\n      // Draw the line\r\n      svg.append('path')\r\n        .datum(chartData)\r\n        .attr('fill', 'none')\r\n        .attr('stroke', 'steelblue')\r\n        .attr('stroke-width', 2)\r\n        .attr('d', line);\r\n    }\r\n  }, [selectedDisease, data]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Select a Disease</h2>\r\n      <select onChange={(e) => setSelectedDisease(e.target.value)} value={selectedDisease}>\r\n        <option value=\"\">Select a disease</option>\r\n        {diseaseNames.map((disease, index) => (\r\n          <option key={index} value={disease}>\r\n            {disease}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {selectedDisease && (\r\n        <div>\r\n          <h3>Occurrences of {selectedDisease}</h3>\r\n          <svg ref={svgRef} width=\"800\" height=\"600\"></svg>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}